/* 
Problem 7 - Union + Intersection
Take three languages L1, L2 and L3 and produce languages (L1 ∩ L2) ∪ L3 and L1 ∩ (L2 ∪ L3).
*/

function unionIntersection (l1, l2, l3, maxOutput){
    f1 = union(intersection(l1, l2), l3);
    f2 = intersection(l1, union(l2, l3));
    remove_duplicates(f1);
    remove_duplicates(f2);
    f1 = cutDownToSize(f1, maxOutput);
    f2 = cutDownToSize(f2, maxOutput);
    final = {f1, f2};
    return final;
}

function cutDownToSize(lang, maxNum){
    temp = {};
    for (i = 0; i < #lang && i < maxNum; i++){
        temp.append(lang[i]);
    }
    return temp;
}

function union (language1, language2){
    found = false;
    temp = {};
    for (i = 0; i < #language2; i++){
        word2 = language2[i];
        temp.append(word2);
    }
    for (x = 0; x < #language1; x++) {
        word1 = language1[x];
        for (y = 0; y < #temp; y++) {
            tempWord = temp[y];
            if (tempWord == word1){
                found = true;
                break;
            }
        }
        if (!found){
            temp.append(word1);
        } else {
            found = false;
        }
    }
    temp.sort();
    return temp;
}

function intersection (language1, language2){
    finalL = {};
    found = false;
    for (x = 0; x < #language1; x++) {
        word1 = language1[x];
        for (y = 0; y < #language2; y++) {
            tempWord = language2[y];
            if (tempWord == word1){
                found = true;
                break;
            }
        }
        if (found){
            finalL.append(word1);
            found = false;
        }
    }
    finalL.sort();
    return finalL;
}

function remove_duplicates(set) {
    length = #set;
    for(i = 0; i < length; i++) {
        entry = set[i];
        for (j = i + 1; j < length - 1; j++) {
            entry2 = set[j];

            if (entry == entry2) {
                set.remove(j);
            }
        }
    }
}

function parse_set(inputStr) {
    set = {};
    word = "";
    for (i = 0; i < #inputStr; i++) {
        c = inputStr[i];

        if (c != " " && c != "{" && c != "}") {
            if (c == ",") {
                set.append(word);
                word = "";
            } else {
                word += c;
            }
        }
    }

    set.append(word);
    return set;
}

function print_results(output) {
    print("{");
    for (i = 0; i < #output; i++) {
        if (output[i] != null) {
            print(output[i]);
    
            if (i != #output - 1) {
                print(", ");
            }
        }
    }
    println("}");
}

while (true) {
    DSStr1 = input();

    if (DSStr1 == eof) {
        break;
    }

    DSStr2 = input();

    DSStr3 = input();

    l1 = parse_set(DSStr1);
    l2 = parse_set(DSStr2);
    l3 = parse_set(DSStr3);

    outCount = input();

    result = unionIntersection(l1, l2, l3, outCount);

    for (i = 0; i < #result; i++) {
        print_results(result[i]);
    }
}
