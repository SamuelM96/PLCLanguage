Syntax / Grammar Sample Language

1) Variables:

1.1) Variable declaration initialisation:
<vType> <vName>;					//Simple Variable declaration.*
<vType> <vName> = <value>;			//Simple Variable declaration and initiation.
<vType> <vName> = <vName>;			//Simple Variable declaration and initiation from a variable of the same type.
global <vType> <vName> = <value>;	//Global Variable declaration and initiation.
<vName> = <value>;					//Variable value assignment.*

-(1.1) Refered as: <varDec>

Anotations:
* Check if and how it is possible in OCaml.

1.1) List of Basic vType:

int     //Integer
double  //Double
char    //Character
string  //String

1.2) List of Other vType:

1.2.1) Tables:

tbl[<vType>] <vName> = new tbl(<int>);												//Simple table declaration and initiation with auto-defind keys.*
tbl[<vType>,<vType>] <vName> = new tbl(<int>);										//Simple table declaration and initiation with self-defind keys.
tbl[<vType>] <vName> = [<value>, <value>, ...];										//Simple table declaration and initiation through direct input with auto-defind keys.
tbl[<vTypeA>,<vTypeB>] <vName> = [<valueA> : <valueB>, <valueA> : <valueB> , ...];	//Simple table declaration and initiation through direct input with self-defind keys.
tbl[<tbl>] <vName> = [<tbl>, <tbl>, ...];												//Nested table declaration and initiation through direct input with auto-defind keys.
tbl[<vType>,<tbl>] <vName> = [<vType> : <tbl>, <vType> : <tbl>, ...];					//Nested table declaration and initiation through direct input with self-defind keys.

-(1.2.1) Refered as: <table>

Anotations:
* See wether this is what you meant in the key thing with the table on your whats app message.

2) Mathematical Operations:

2.1) Main Mathematical operations:

2.1.1) Addition:

<int> + <int>;			//Simple addition for integers.
<double> + <double>;	//Simple addition for doubles.
<string> + <string>;	//Simple addition for strings.
<vType> += <vType>;		//Addition and replacement of the values to the original variable.

2.1.2) Subtraction:

<int> - <int>;			//Simple subtraction for integers.
<double> - <double>;	//Simple subtraction for doubles.
<vType> -= <vType>;		//Subtraction and replacement of the values to the original variable.

2.1.3) Multiplication:

<int> * <int>; 			//Simple multiplication for integers.
<double> * <double>;	//Simple multiplication for doubles.
<vType> *= <vType>;		//Multiplication and replacement of the values to the original variable.

2.1.4) Division:

<int> / <int>;			//Simple division for integers.
<double> / <double>;	//Simple division for doubles.
<vType> /= <vType>;		//Devision and replacement of the values to the original variable.

2.1.5) Remainder:

<int> % <int>;			//Simple remainder for integers.

2.1.6) Simple addition or subtraction of 1:

<int> ++;				//Simple increment of 1.
<int> --;				//Simple decrease of 1.

-(2.1.6) Refered as: <vChanBy1>

-(2.1) Refered as: <mainMathOp>

2.2) Comparing operations:
<vName> == <vName>	//Checks for equality.
<vName> != <vName>	//Checks for in-equality.
<vName> > <vName>	//Checks for greater.
<vName> >= <vName>	//Checks for greater or equal.
<vName> < <vName>	//Checks for less.
<vName> <= <vName>	//Checks for less or equal.

-(2.2) Refered as: <compTest>

2.5) Logical Mathematics:

<compTest> && <compTest>	//Logical 'AND'.
<compTest> || <compTest>	//Logical 'OR'.
! <compTest>				//Logical 'NOT'.

-(2.5) Refered as: <logicTest>

3) Loops:

3.1) 'FOR' Loop:

for (<varDec>* <compTest> <vChanBy1>){ <code> }		//Simple 'for' loop used in most programming languages.
for(<varDec> : <table>){ <code> }					//Enchanced 'for' loop as used in Java.

-(3.1) Refered as: <forLoop>

Annotations:
* Variable declared needs to be of integer type.

3.2) 'While' loop:

while (<logicTest>){ <code> }		//Simple 'while' loop used in most programming languages.
do { <code> } while (<logicTest>)	//Simple 'do while' loop used in other programming languages.

-(3.1) Refered as: <whileLoop>

4) Logical Branching:

if (<logicTest>) { <code> }						//Simple if condition.
if (<logicTest>) { <code> } else { <code> }		//Simple if-else condition.
if (<logicTest>) { <code> } elseif (<logicTest>) { <code> } * else { <code> }	//Simple if-elseif-else condition.

-(3.1) Refered as: <ifStat>

Anotations:
Unlimmited number of elseif clauses can be used.