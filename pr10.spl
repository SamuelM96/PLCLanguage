/* 
Problem 10 - Union + Intersection + Concatenation
Take languages L1 and L2 and output L1 ∪ L2 concatenated with L1 ∩ L2.
*/

function unionIntersectionConcatenation(l1, l2, maxNum){
    f2 = intersection(l1, l2);
    f1 = union(l1, l2);
    temp = {};
    for (i = 0; i < #f1; i++){
        f1Word = f1[i];
        for (j = 0; j < #f2; j++){
            f2Word = f2[j];
            if (f1Word == ":" && f2Word == ":"){
                temp.append(":");
            } else if (f1Word == ":") {
                temp.append(f2Word);
            } else if (f2Word == ":") {
                temp.append(f1Word);
            } else {
                temp.append(f1Word + f2Word);
            }
        }
    }
    return cutDownToSize(temp, maxNum);
}

function union (language1, language2){
    found = false;
    temp = {};
    for (i = 0; i < #language2; i++){
        word2 = language2[i];
        temp.append(word2);
    }
    for (x = 0; x < #language1; x++) {
        word1 = language1[x];
        for (y = 0; y < #temp; y++) {
            tempWord = temp[y];
            if (tempWord == word1){
                found = true;
                break;
            }
        }
        if (!found){
            temp.append(word1);
        } else {
            found = false;
        }
    }
    temp.sort();
    return temp;
}

function intersection (language1, language2){
    finalL = {};
    found = false;

    for (x = 0; x < #language1; x++) {
        word1 = language1[x];
        for (y = 0; y < #language2; y++) {
            tempWord = language2[y];
            if (tempWord == word1){
                found = true;
                break;
            }
        }
        if (found){
            finalL.append(word1);
            found = false;
        }
    }
    finalL.sort();
    return finalL;
}

function cutDownToSize(lang, maxNum){
    temp = {};
    lang.sort();
    remove_duplicates(lang);
    for (i = 0; i < #lang && i < maxNum; i++){
        temp.append(lang[i]);
    }
    return temp;
}

function remove_duplicates(set) {
    length = #set;
    for(i = 0; i < length; i++) {
        entry = set[i];
        for (j = i + 1; j < length - 1; j++) {
            entry2 = set[j];

            if (entry == entry2) {
                set.remove(j);
            }
        }
    }
}

function parse_set(inputStr) {
    set = {};
    word = "";
    for (i = 0; i < #inputStr; i++) {
        c = inputStr[i];

        if (c != " " && c != "{" && c != "}") {
            if (c == ",") {
                set.append(word);
                word = "";
            } else {
                word += c;
            }
        }
    }

    set.append(word);
    return set;
}

function print_results(output) {
    print("{");
    for (i = 0; i < #output; i++) {
        if (output[i] != null) {
            print(output[i]);
    
            if (i != #output - 1) {
                print(", ");
            }
        }
    }
    println("}");
}

while (true) {
    DSStr = input();

    if (DSStr == eof) {
        break;
    }
    DSStr2 = input();

    l1 = parse_set(DSStr);
    l2 = parse_set(DSStr2);
    outCount = input();
    print_results(unionIntersectionConcatenation(l1, l2, outCount));
}