/*
Problem 9 - Prefix + Union + Concatenation
Take two languages L1 and L2 and output (aL1) ∪ (L2b*) – the union of L1 prefixed with a and L2 concatenated with b*.
*/

function prefixUnionConcatanation (l1, l2, maxNum){
    temp1 = {};
    temp2 = {};
    for (i = 0; i < #l1; i++) {
        word = l1[i];
        if (word == ":") {
            temp1.append("a");
        } else {
            temp1.append("a" + word);
        }
        if(#temp1 + #temp2 == outputNumber){
            break;
        }
    }
    bWord = "";
    while(#temp2 + #temp1 != outputNumber){
        for (i = 0; i < #l2; i++) {
            word = l2[i];
            if (word == ":") {
                temp2.append(bWord);
            } else {
                temp2.append(word + bWord);
            }
            if(#temp2 + #temp1 == outputNumber){
                break;
            }
        }
        if(#temp2 + #temp1 == outputNumber){
            break;
        }
        bWord += "b";
        println(bWord);
    }
    final = union(temp1, temp2, maxNum);
    return final;
}

function union (language1, language2, outputNumber){
    found = false;
    for (x = 0; x < #language1; x++) {
        word1 = language1[x];
        for (y = 0; y < #language2; y++) {
            tempWord = language2[y];
            if (tempWord == word1){
                found = true;
                break;
            }
        }
        if (!found){
            language2.append(word1);
        } else {
            found = false;
        }
        if(#language1 == outputNumber){
            break;
        }
    }
    language2.sort();
    return language2;
}

function remove_duplicates(set) {
    length = #set;
    for(i = 0; i < length; i++) {
        entry = set[i];
        for (j = i + 1; j < length - 1; j++) {
            entry2 = set[j];

            if (entry == entry2) {
                set.remove(j);
            }
        }
    }
}

function parse_set(inputStr) {
    set = {};
    word = "";
    for (i = 0; i < #inputStr; i++) {
        c = inputStr[i];

        if (c != " " && c != "{" && c != "}") {
            if (c == ",") {
                set.append(word);
                word = "";
            } else {
                word += c;
            }
        }
    }

    set.append(word);
    return set;
}

function print_results(output) {
    print("{");
    for (i = 0; i < #output; i++) {
        if (output[i] != null) {
            print(output[i]);
    
            if (i != #output - 1) {
                print(", ");
            }
        }
    }
    println("}");
}

while (true) {
    DSStr1 = input();

    if (DSStr1 == eof) {
        break;
    }

    DSStr2 = input();

    l1 = parse_set(DSStr1);
    l2 = parse_set(DSStr2);

    outCount = input();
    result = prefixUnionConcatanation(l1, l2, outCount);
    print_results(result);
}
