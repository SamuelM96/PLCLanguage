/*
Problem 2 - Union
Take three languages L1, L2 and L3 and output L1 ∪ L2 and L1 ∪ L3.
*/

function union (language1, language2, language3, outputNumber){
	println(language2);
	println(language2[0]);
	temp = {language2, language3};
	println(temp);
	println(temp[0]);
	err = temp[0];
	printLn(err[0]);
	isFound = false;
	for (j = 0; j < #temp; j++) {
        tempLang = temp[j];
		for (x = 0; x < #language1; x++) {
        	word1 = language1[x];
			for (y = 0; y < #temp; y++) {
			println(tempLang);
			println(y);
        		tempWord = tempLang[y];
        		        	println("Hi");
				if (tempWord == word1){
					found = true;
					break;
				}
			}
			if (!found){
				tempLang.add(word1);
				if(#tempLang >= outputNumber){
					break;
				}
			} else {
				found = false;
			}
		}
	}
	language2.sort();
	language3.sort();
	return temp;
}

function remove_duplicates(set) {
    length = #set;
    for(i = 0; i < length; i++) {
        entry = set[i];
        for (j = i + 1; j < length - 1; j++) {
            entry2 = set[j];

            if (entry == entry2) {
                set.remove(j);
            }
        }
    }
}

function parse_set(inputStr) {
    set = {};
    word = "";
    for (i = 0; i < #inputStr; i++) {
        c = inputStr[i];

        if (c != " " && c != "{" && c != "}") {
            if (c == ",") {
                set.append(word);
                word = "";
            } else {
                word += c;
            }
        }
    }

    set.append(word);
    return set;
}

function print_results(output) {
    print("{");
    for (i = 0; i < #output; i++) {
        if (output[i] != null) {
            print(output[i]);
    
            if (i != #output - 1) {
                print(", ");
            }
        }
    }
    println("}");
}

while (true) {
    DSStr1 = input();

    if (DSStr1 == eof) {
        break;
    }

    DSStr2 = input();

    DSStr3 = input();

    l1 = parse_set(DSStr1);
    l2 = parse_set(DSStr2);
    l3 = parse_set(DSStr3);

    outCount = input();
    print_results(union(l1, l2, l3, outCount));
}
